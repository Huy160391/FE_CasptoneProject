import React, { useState, useEffect } from 'react';
import {
    Modal,
    Table,
    Button,
    Space,
    Tag,
    Avatar,
    Typography,
    Spin,
    message,
    Alert,
    Input,
    Card,
    Row,
    Col,
    Statistic,
    Empty,
    Form
} from 'antd';
import {
    UserOutlined,
    MailOutlined,
    PhoneOutlined,
    SendOutlined,
    SearchOutlined,
    StarOutlined,
    CalendarOutlined,
    CheckCircleOutlined,
    CloseCircleOutlined,
    ToolOutlined,
    TrophyOutlined
} from '@ant-design/icons';
import SkillsDisplay from '../common/SkillsDisplay';
import { useAuthStore } from '@/store/useAuthStore';
import { getTourGuides, getAvailableTourGuides, manualInviteGuide } from '../../services/tourcompanyService';

const { Text } = Typography;
const { Search, TextArea } = Input;

interface TourGuide {
    id: string;
    fullName: string;
    email: string;
    phoneNumber: string;
    isActive: boolean;
    isAvailable: boolean;
    experience: string; // Full experience description from backend
    specialization?: string; // Contains skills data from backend (comma-separated)
    averageRating?: number;
    completedTours: number;
    joinedDate: string;
    currentStatus: string;
}

interface ManualInviteGuideModalProps {
    visible: boolean;
    onCancel: () => void;
    onSuccess: () => void;
    tourDetailsId: string | null;
    tourInfo?: {
        title: string;
        startDate: string;
        endDate: string;
    };
}

const ManualInviteGuideModal: React.FC<ManualInviteGuideModalProps> = ({
    visible,
    onCancel,
    onSuccess,
    tourDetailsId,
    tourInfo
}) => {
    const [guides, setGuides] = useState<TourGuide[]>([]);
    const [filteredGuides, setFilteredGuides] = useState<TourGuide[]>([]);
    const [loading, setLoading] = useState(false);
    const [inviting, setInviting] = useState<string | null>(null);
    const [searchText, setSearchText] = useState('');
    const [showAvailableOnly, setShowAvailableOnly] = useState(false);
    const [messageModalVisible, setMessageModalVisible] = useState(false);
    const [selectedGuide, setSelectedGuide] = useState<TourGuide | null>(null);
    const { token } = useAuthStore();
    const [form] = Form.useForm();

    useEffect(() => {
        if (visible && tourDetailsId) {
            loadTourGuides();
        }
    }, [visible, tourDetailsId]);

    useEffect(() => {
        filterGuides();
    }, [guides, searchText, showAvailableOnly]);

    const loadTourGuides = async () => {
        if (!token || !tourInfo) return;

        setLoading(true);
        try {
            let response;
            console.log('üîç Loading tour guides, showAvailableOnly:', showAvailableOnly);

            if (showAvailableOnly && tourInfo.startDate) {
                // Get available guides for tour date
                const tourDate = new Date(tourInfo.startDate).toISOString().split('T')[0];
                console.log('üìÖ Getting available guides for date:', tourDate);
                response = await getAvailableTourGuides(tourDate, undefined, token);
            } else {
                // Get all guides
                console.log('üë• Getting all guides');
                response = await getTourGuides(false, token);
            }

            console.log('üì° Tour guides API response:', response);

            // Handle both direct array response and ApiResponse wrapper
            if (Array.isArray(response)) {
                // Direct array response from backend
                console.log('‚úÖ Direct array response, guides count:', response.length);
                setGuides(response);
            } else if (response.success) {
                // ApiResponse wrapper
                console.log('‚úÖ ApiResponse wrapper, guides count:', response.data?.length || 0);
                setGuides(response.data || []);
            } else {
                console.log('‚ùå API error:', response.message);
                message.error(response.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch h∆∞·ªõng d·∫´n vi√™n');
            }
        } catch (error: any) {
            console.error('Error loading tour guides:', error);
            message.error('C√≥ l·ªói x·∫£y ra khi t·∫£i danh s√°ch h∆∞·ªõng d·∫´n vi√™n');
        } finally {
            setLoading(false);
        }
    };

    const filterGuides = () => {
        let filtered = guides;

        if (searchText) {
            filtered = filtered.filter(guide =>
                guide.fullName.toLowerCase().includes(searchText.toLowerCase()) ||
                guide.email.toLowerCase().includes(searchText.toLowerCase()) ||
                guide.phoneNumber.includes(searchText)
            );
        }

        if (showAvailableOnly) {
            filtered = filtered.filter(guide => guide.isActive && guide.isAvailable);
        }

        setFilteredGuides(filtered);
    };

    const handleInviteGuide = (guide: TourGuide) => {
        setSelectedGuide(guide);
        setMessageModalVisible(true);
        form.resetFields();
    };

    const handleConfirmInvite = async () => {
        if (!tourDetailsId || !token || !selectedGuide) {
            message.error('Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ g·ª≠i l·ªùi m·ªùi');
            return;
        }

        try {
            const values = await form.validateFields();
            setInviting(selectedGuide.id);
            
            const response = await manualInviteGuide(
                tourDetailsId, 
                selectedGuide.id, 
                values.invitationMessage || '', 
                token
            );

            if (response.success) {
                message.success('ƒê√£ g·ª≠i l·ªùi m·ªùi th√†nh c√¥ng! H∆∞·ªõng d·∫´n vi√™n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email th√¥ng b√°o.');
                setMessageModalVisible(false);
                setSelectedGuide(null);
                form.resetFields();
                onSuccess();
            } else {
                message.error(response.message || 'C√≥ l·ªói x·∫£y ra khi g·ª≠i l·ªùi m·ªùi');
            }
        } catch (error: any) {
            console.error('Error inviting guide:', error);
            message.error(error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi g·ª≠i l·ªùi m·ªùi');
        } finally {
            setInviting(null);
        }
    };

    const handleCancelInvite = () => {
        setMessageModalVisible(false);
        setSelectedGuide(null);
        form.resetFields();
    };

    const handleCancel = () => {
        setSearchText('');
        setGuides([]);
        setFilteredGuides([]);
        setMessageModalVisible(false);
        setSelectedGuide(null);
        form.resetFields();
        onCancel();
    };

    const columns = [
        {
            title: 'H∆∞·ªõng d·∫´n vi√™n',
            key: 'guide',
            render: (_: any, record: TourGuide) => (
                <Space>
                    <Avatar size="large" icon={<UserOutlined />} />
                    <div>
                        <div style={{ fontWeight: 'bold' }}>{record.fullName}</div>
                        <Text type="secondary" style={{ fontSize: '12px' }}>
                            ID: {record.id.slice(0, 8)}...
                        </Text>
                    </div>
                </Space>
            ),
        },
        {
            title: 'Kinh nghi·ªám',
            key: 'experience',
            width: 250,
            render: (_: any, record: TourGuide) => (
                <div>
                    <div style={{ marginBottom: 4 }}>
                        <TrophyOutlined style={{ marginRight: 4, color: '#fa8c16' }} />
                        <Text strong style={{ fontSize: '12px' }}>Kinh nghi·ªám:</Text>
                    </div>
                    <Text style={{ fontSize: '11px', lineHeight: '1.4' }}>
                        {record.experience || 'Ch∆∞a c√≥ th√¥ng tin kinh nghi·ªám'}
                    </Text>
                </div>
            ),
        },
        {
            title: 'Li√™n h·ªá',
            key: 'contact',
            render: (_: any, record: TourGuide) => (
                <div>
                    <div style={{ marginBottom: 4 }}>
                        <MailOutlined style={{ marginRight: 8, color: '#1890ff' }} />
                        <Text style={{ fontSize: '12px' }}>{record.email}</Text>
                    </div>
                    <div>
                        <PhoneOutlined style={{ marginRight: 8, color: '#52c41a' }} />
                        <Text style={{ fontSize: '12px' }}>{record.phoneNumber}</Text>
                    </div>
                </div>
            ),
        },
        {
            title: 'K·ªπ nƒÉng',
            key: 'skills',
            width: 200,
            render: (_: any, record: TourGuide) => (
                <div>
                    <div style={{ marginBottom: 4 }}>
                        <ToolOutlined style={{ marginRight: 4, color: '#722ed1' }} />
                        <Text strong style={{ fontSize: '12px' }}>K·ªπ nƒÉng:</Text>
                    </div>
                    {record.specialization ? (
                        <SkillsDisplay
                            skillsString={record.specialization}
                            maxDisplay={2}
                            size="small"
                        />
                    ) : (
                        <Text type="secondary" style={{ fontSize: '11px' }}>
                            Ch∆∞a c√≥ k·ªπ nƒÉng
                        </Text>
                    )}
                </div>
            ),
        },
        {
            title: 'Th·ªëng k√™',
            key: 'stats',
            render: (_: any, record: TourGuide) => (
                <div>
                    <div style={{ marginBottom: 4 }}>
                        <StarOutlined style={{ marginRight: 4, color: '#faad14' }} />
                        <Text style={{ fontSize: '12px' }}>
                            {record.averageRating ? `${record.averageRating}/5` : 'Ch∆∞a c√≥ ƒë√°nh gi√°'}
                        </Text>
                    </div>
                    <div>
                        <CheckCircleOutlined style={{ marginRight: 4, color: '#52c41a' }} />
                        <Text style={{ fontSize: '12px' }}>{record.completedTours} tour ho√†n th√†nh</Text>
                    </div>
                </div>
            ),
        },
        {
            title: 'Tr·∫°ng th√°i',
            key: 'status',
            render: (_: any, record: TourGuide) => (
                <Space direction="vertical" size="small">
                    <Tag color={record.isActive ? 'green' : 'red'}>
                        {record.isActive ? 'Ho·∫°t ƒë·ªông' : 'Kh√¥ng ho·∫°t ƒë·ªông'}
                    </Tag>
                    <Tag color={record.isAvailable ? 'blue' : 'orange'}>
                        {record.isAvailable ? 'C√≥ s·∫µn' : 'B·∫≠n'}
                    </Tag>
                </Space>
            ),
        },
        {
            title: 'Thao t√°c',
            key: 'actions',
            render: (_: any, record: TourGuide) => (
                <Button
                    type="primary"
                    icon={<SendOutlined />}
                    onClick={() => handleInviteGuide(record)}
                    loading={inviting === record.id}
                    disabled={!record.isActive || !record.isAvailable}
                    size="small"
                >
                    M·ªùi
                </Button>
            ),
        },
    ];

    return (
        <Modal
            title={
                <Space>
                    <UserOutlined />
                    <span>M·ªùi th·ªß c√¥ng h∆∞·ªõng d·∫´n vi√™n</span>
                    {tourInfo && (
                        <Text type="secondary">- {tourInfo.title}</Text>
                    )}
                </Space>
            }
            open={visible}
            onCancel={handleCancel}
            footer={null}
            width={1450}
            destroyOnClose
        >
            {tourInfo && (
                <Card size="small" style={{ marginBottom: 16 }}>
                    <Row gutter={16}>
                        <Col span={8}>
                            <Statistic
                                title="Tour"
                                value={tourInfo.title}
                                valueStyle={{ fontSize: '14px' }}
                            />
                        </Col>
                        <Col span={8}>
                            <Statistic
                                title="Ng√†y b·∫Øt ƒë·∫ßu"
                                value={new Date(tourInfo.startDate).toLocaleDateString('vi-VN')}
                                prefix={<CalendarOutlined />}
                                valueStyle={{ fontSize: '14px' }}
                            />
                        </Col>
                        <Col span={8}>
                            <Statistic
                                title="Ng√†y k·∫øt th√∫c"
                                value={new Date(tourInfo.endDate).toLocaleDateString('vi-VN')}
                                prefix={<CalendarOutlined />}
                                valueStyle={{ fontSize: '14px' }}
                            />
                        </Col>
                    </Row>
                </Card>
            )}

            <Alert
                message="L∆∞u √Ω"
                description="Ch·ª©c nƒÉng n√†y d√πng ƒë·ªÉ m·ªùi th·ªß c√¥ng h∆∞·ªõng d·∫´n vi√™n khi h·ªá th·ªëng kh√¥ng t√¨m ƒë∆∞·ª£c guide ph√π h·ª£p ho·∫∑c c√°c guide ƒë√£ t·ª´ ch·ªëi l·ªùi m·ªùi t·ª± ƒë·ªông."
                type="info"
                showIcon
                style={{ marginBottom: 16 }}
            />

            <Space style={{ marginBottom: 16, width: '100%', justifyContent: 'space-between' }}>
                <Search
                    placeholder="T√¨m ki·∫øm theo t√™n, email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i..."
                    value={searchText}
                    onChange={(e) => setSearchText(e.target.value)}
                    style={{ width: 300 }}
                    prefix={<SearchOutlined />}
                />
                <Space>
                    <Button
                        type={showAvailableOnly ? 'primary' : 'default'}
                        onClick={() => setShowAvailableOnly(!showAvailableOnly)}
                        icon={showAvailableOnly ? <CheckCircleOutlined /> : <CloseCircleOutlined />}
                    >
                        {showAvailableOnly ? 'Ch·ªâ hi·ªán c√≥ s·∫µn' : 'Hi·ªán t·∫•t c·∫£'}
                    </Button>
                    <Button onClick={loadTourGuides} loading={loading}>
                        L√†m m·ªõi
                    </Button>
                </Space>
            </Space>

            <Spin spinning={loading}>
                {filteredGuides.length === 0 ? (
                    <Empty
                        description="Kh√¥ng t√¨m th·∫•y h∆∞·ªõng d·∫´n vi√™n n√†o"
                        style={{ margin: '40px 0' }}
                    />
                ) : (
                    <Table
                        columns={columns}
                        dataSource={filteredGuides}
                        rowKey="id"
                        pagination={{
                            pageSize: 10,
                            showSizeChanger: false,
                            showQuickJumper: true,
                            showTotal: (total) => `T·ªïng ${total} h∆∞·ªõng d·∫´n vi√™n`
                        }}
                        size="small"
                        scroll={{ x: 1350 }}
                    />
                )}
            </Spin>

            {/* Modal nh·∫≠p tin nh·∫Øn m·ªùi */}
            <Modal
                title={
                    <Space>
                        <SendOutlined />
                        <span>G·ª≠i l·ªùi m·ªùi ƒë·∫øn h∆∞·ªõng d·∫´n vi√™n</span>
                    </Space>
                }
                open={messageModalVisible}
                onCancel={handleCancelInvite}
                footer={[
                    <Button key="cancel" onClick={handleCancelInvite}>
                        H·ªßy
                    </Button>,
                    <Button
                        key="submit"
                        type="primary"
                        loading={inviting !== null}
                        onClick={handleConfirmInvite}
                        icon={<SendOutlined />}
                    >
                        G·ª≠i l·ªùi m·ªùi
                    </Button>
                ]}
                width={600}
                destroyOnClose
            >
                {selectedGuide && (
                    <>
                        <Card size="small" style={{ marginBottom: 16 }}>
                            <Space>
                                <Avatar size="large" icon={<UserOutlined />} />
                                <div>
                                    <div style={{ fontWeight: 'bold', fontSize: '16px' }}>
                                        {selectedGuide.fullName}
                                    </div>
                                    <Text type="secondary">
                                        <MailOutlined style={{ marginRight: 4 }} />
                                        {selectedGuide.email}
                                    </Text>
                                    <br />
                                    <Text type="secondary">
                                        <PhoneOutlined style={{ marginRight: 4 }} />
                                        {selectedGuide.phoneNumber}
                                    </Text>
                                </div>
                            </Space>
                        </Card>

                        <Form form={form} layout="vertical">
                            <Form.Item
                                name="invitationMessage"
                                label="Tin nh·∫Øn m·ªùi (t√πy ch·ªçn)"
                                extra="B·∫°n c√≥ th·ªÉ th√™m tin nh·∫Øn c√° nh√¢n ƒë·ªÉ thu h√∫t h∆∞·ªõng d·∫´n vi√™n tham gia tour n√†y"
                            >
                                <TextArea
                                    rows={4}
                                    placeholder="V√≠ d·ª•: Ch√∫ng t√¥i r·∫•t mong ƒë∆∞·ª£c h·ª£p t√°c v·ªõi b·∫°n cho tour n√†y. ƒê√¢y l√† m·ªôt tour ƒë·∫∑c bi·ªát v√† ch√∫ng t√¥i tin r·∫±ng b·∫°n s·∫Ω l√† ng∆∞·ªùi ph√π h·ª£p nh·∫•t..."
                                    maxLength={500}
                                    showCount
                                />
                            </Form.Item>
                        </Form>

                        <Alert
                            message="L∆∞u √Ω"
                            description="H∆∞·ªõng d·∫´n vi√™n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email th√¥ng b√°o k√®m theo tin nh·∫Øn n√†y. L·ªùi m·ªùi s·∫Ω c√≥ hi·ªáu l·ª±c trong 24 gi·ªù."
                            type="info"
                            showIcon
                            style={{ marginTop: 16 }}
                        />
                    </>
                )}
            </Modal>
        </Modal>
    );
};

export default ManualInviteGuideModal;
